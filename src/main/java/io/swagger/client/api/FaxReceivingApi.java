/**
 * Fax.to REST API client for Android
 * This is Fax.to REST API client for Android.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: inquiries@fax.to
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse20013;
import io.swagger.client.model.InlineResponse20014;
import io.swagger.client.model.InlineResponse20015;
import io.swagger.client.model.InlineResponse20016;
import io.swagger.client.model.InlineResponse20017;
import io.swagger.client.model.InlineResponse2004;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class FaxReceivingApi {
  String basePath = "https://api.fax.to/api/v2";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * This API gets a list of countries with its area code
  * 
   * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format
   * @param STATE_ID The numerical identifier for the state
   * @param apiKey 
   * @return InlineResponse20014
  */
  public InlineResponse20014 areaCodesCountryCodeStateIdGet (Integer COUNTRY_CODE, Integer STATE_ID, String apiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'COUNTRY_CODE' is set
    if (COUNTRY_CODE == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'COUNTRY_CODE' when calling areaCodesCountryCodeStateIdGet",
        new ApiException(400, "Missing the required parameter 'COUNTRY_CODE' when calling areaCodesCountryCodeStateIdGet"));
    }
    // verify the required parameter 'STATE_ID' is set
    if (STATE_ID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'STATE_ID' when calling areaCodesCountryCodeStateIdGet",
        new ApiException(400, "Missing the required parameter 'STATE_ID' when calling areaCodesCountryCodeStateIdGet"));
    }
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling areaCodesCountryCodeStateIdGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling areaCodesCountryCodeStateIdGet"));
    }

    // create path and map variables
    String path = "/areacodes/{COUNTRY_CODE}/{STATE_ID}".replaceAll("\\{" + "COUNTRY_CODE" + "\\}", apiInvoker.escapeString(COUNTRY_CODE.toString())).replaceAll("\\{" + "STATE_ID" + "\\}", apiInvoker.escapeString(STATE_ID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));
    String[] contentTypes = {
      "application/json",
      "application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse20014) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20014.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * This API gets a list of countries with its area code
   * 
   * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format   * @param STATE_ID The numerical identifier for the state   * @param apiKey 
  */
  public void areaCodesCountryCodeStateIdGet (Integer COUNTRY_CODE, Integer STATE_ID, String apiKey, final Response.Listener<InlineResponse20014> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'COUNTRY_CODE' is set
    if (COUNTRY_CODE == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'COUNTRY_CODE' when calling areaCodesCountryCodeStateIdGet",
        new ApiException(400, "Missing the required parameter 'COUNTRY_CODE' when calling areaCodesCountryCodeStateIdGet"));
    }
    // verify the required parameter 'STATE_ID' is set
    if (STATE_ID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'STATE_ID' when calling areaCodesCountryCodeStateIdGet",
        new ApiException(400, "Missing the required parameter 'STATE_ID' when calling areaCodesCountryCodeStateIdGet"));
    }
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling areaCodesCountryCodeStateIdGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling areaCodesCountryCodeStateIdGet"));
    }

    // create path and map variables
    String path = "/areacodes/{COUNTRY_CODE}/{STATE_ID}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "COUNTRY_CODE" + "\\}", apiInvoker.escapeString(COUNTRY_CODE.toString())).replaceAll("\\{" + "STATE_ID" + "\\}", apiInvoker.escapeString(STATE_ID.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));

    String[] contentTypes = {
      "application/json","application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20014) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20014.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * This API gets a list of DID groups
  * 
   * @param COUNTRY_CODE Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format
   * @param areaCode The area code of the DID group
   * @param apiKey 
   * @param didGroupIds Used to display more information about specific DID groups
   * @param stateId The numerical identifier for the didGroup&#39;s state
   * @param cityNamePattern A string pattern for the beginning of city name
   * @return InlineResponse20015
  */
  public InlineResponse20015 countriesCountryCodeDidGroupsGet (Integer COUNTRY_CODE, Integer areaCode, String apiKey, Integer didGroupIds, Integer stateId, Integer cityNamePattern) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'COUNTRY_CODE' is set
    if (COUNTRY_CODE == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'COUNTRY_CODE' when calling countriesCountryCodeDidGroupsGet",
        new ApiException(400, "Missing the required parameter 'COUNTRY_CODE' when calling countriesCountryCodeDidGroupsGet"));
    }
    // verify the required parameter 'areaCode' is set
    if (areaCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling countriesCountryCodeDidGroupsGet",
        new ApiException(400, "Missing the required parameter 'areaCode' when calling countriesCountryCodeDidGroupsGet"));
    }
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling countriesCountryCodeDidGroupsGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling countriesCountryCodeDidGroupsGet"));
    }

    // create path and map variables
    String path = "/countries/{countryCode}/didgroups".replaceAll("\\{" + "COUNTRY_CODE" + "\\}", apiInvoker.escapeString(COUNTRY_CODE.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "didGroupIds", didGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stateId", stateId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cityNamePattern", cityNamePattern));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "areaCode", areaCode));
    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));
    String[] contentTypes = {
      "application/json",
      "application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse20015) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20015.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * This API gets a list of DID groups
   * 
   * @param COUNTRY_CODE Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format   * @param areaCode The area code of the DID group   * @param apiKey    * @param didGroupIds Used to display more information about specific DID groups   * @param stateId The numerical identifier for the didGroup&#39;s state   * @param cityNamePattern A string pattern for the beginning of city name
  */
  public void countriesCountryCodeDidGroupsGet (Integer COUNTRY_CODE, Integer areaCode, String apiKey, Integer didGroupIds, Integer stateId, Integer cityNamePattern, final Response.Listener<InlineResponse20015> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'COUNTRY_CODE' is set
    if (COUNTRY_CODE == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'COUNTRY_CODE' when calling countriesCountryCodeDidGroupsGet",
        new ApiException(400, "Missing the required parameter 'COUNTRY_CODE' when calling countriesCountryCodeDidGroupsGet"));
    }
    // verify the required parameter 'areaCode' is set
    if (areaCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling countriesCountryCodeDidGroupsGet",
        new ApiException(400, "Missing the required parameter 'areaCode' when calling countriesCountryCodeDidGroupsGet"));
    }
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling countriesCountryCodeDidGroupsGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling countriesCountryCodeDidGroupsGet"));
    }

    // create path and map variables
    String path = "/countries/{countryCode}/didgroups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "COUNTRY_CODE" + "\\}", apiInvoker.escapeString(COUNTRY_CODE.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "didGroupIds", didGroupIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stateId", stateId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cityNamePattern", cityNamePattern));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "areaCode", areaCode));

    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));

    String[] contentTypes = {
      "application/json","application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20015) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20015.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * This API gets a list of countries available in the Fax.to coverage
  * 
   * @param apiKey 
   * @return InlineResponse20012
  */
  public InlineResponse20012 countriesGet (String apiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling countriesGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling countriesGet"));
    }

    // create path and map variables
    String path = "/countries";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));
    String[] contentTypes = {
      "application/json",
      "application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse20012) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20012.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * This API gets a list of countries available in the Fax.to coverage
   * 
   * @param apiKey 
  */
  public void countriesGet (String apiKey, final Response.Listener<InlineResponse20012> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling countriesGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling countriesGet"));
    }

    // create path and map variables
    String path = "/countries".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));

    String[] contentTypes = {
      "application/json","application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20012) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20012.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * This API gets a list of incoming faxes
  * 
   * @param apiKey 
   * @param limit The number of record to return
   * @param page The page you want to get
   * @return InlineResponse2004
  */
  public InlineResponse2004 incomingFaxesGet (String apiKey, String limit, String page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling incomingFaxesGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling incomingFaxesGet"));
    }

    // create path and map variables
    String path = "/incoming-faxes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));
    String[] contentTypes = {
      "application/json",
      "application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse2004) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2004.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * This API gets a list of incoming faxes
   * 
   * @param apiKey    * @param limit The number of record to return   * @param page The page you want to get
  */
  public void incomingFaxesGet (String apiKey, String limit, String page, final Response.Listener<InlineResponse2004> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling incomingFaxesGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling incomingFaxesGet"));
    }

    // create path and map variables
    String path = "/incoming-faxes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));

    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));

    String[] contentTypes = {
      "application/json","application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2004) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2004.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * This API gets a list of incoming faxes for a specific recipient
  * 
   * @param recipient The recipient&#39;s fax number
   * @param apiKey 
   * @param limit The number of record to return
   * @param page The page you want to get
   * @return InlineResponse2004
  */
  public InlineResponse2004 incomingFaxesRecipientGet (Integer recipient, String apiKey, String limit, String page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'recipient' is set
    if (recipient == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'recipient' when calling incomingFaxesRecipientGet",
        new ApiException(400, "Missing the required parameter 'recipient' when calling incomingFaxesRecipientGet"));
    }
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling incomingFaxesRecipientGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling incomingFaxesRecipientGet"));
    }

    // create path and map variables
    String path = "/incoming-faxes/{recipient}".replaceAll("\\{" + "recipient" + "\\}", apiInvoker.escapeString(recipient.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));
    String[] contentTypes = {
      "application/json",
      "application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse2004) ApiInvoker.deserialize(localVarResponse, "", InlineResponse2004.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * This API gets a list of incoming faxes for a specific recipient
   * 
   * @param recipient The recipient&#39;s fax number   * @param apiKey    * @param limit The number of record to return   * @param page The page you want to get
  */
  public void incomingFaxesRecipientGet (Integer recipient, String apiKey, String limit, String page, final Response.Listener<InlineResponse2004> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'recipient' is set
    if (recipient == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'recipient' when calling incomingFaxesRecipientGet",
        new ApiException(400, "Missing the required parameter 'recipient' when calling incomingFaxesRecipientGet"));
    }
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling incomingFaxesRecipientGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling incomingFaxesRecipientGet"));
    }

    // create path and map variables
    String path = "/incoming-faxes/{recipient}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "recipient" + "\\}", apiInvoker.escapeString(recipient.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));

    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));

    String[] contentTypes = {
      "application/json","application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse2004) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse2004.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * This API gets a list of numbers to get the current configuration of one or multiple number
  * 
   * @param apiKey 
   * @param limit The number of record to return
   * @param page The page you want to get
   * @return InlineResponse20017
  */
  public InlineResponse20017 numbersGet (String apiKey, String limit, String page) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling numbersGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling numbersGet"));
    }

    // create path and map variables
    String path = "/numbers";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));
    String[] contentTypes = {
      "application/json",
      "application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse20017) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20017.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * This API gets a list of numbers to get the current configuration of one or multiple number
   * 
   * @param apiKey    * @param limit The number of record to return   * @param page The page you want to get
  */
  public void numbersGet (String apiKey, String limit, String page, final Response.Listener<InlineResponse20017> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling numbersGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling numbersGet"));
    }

    // create path and map variables
    String path = "/numbers".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));

    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));

    String[] contentTypes = {
      "application/json","application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20017) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20017.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * This API gets a list of provisioned numbers
  * 
   * @param didGroupId The id of the did group
   * @param apiKey 
   * @return InlineResponse20016
  */
  public InlineResponse20016 provisionNumbersGet (Integer didGroupId, String apiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'didGroupId' is set
    if (didGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'didGroupId' when calling provisionNumbersGet",
        new ApiException(400, "Missing the required parameter 'didGroupId' when calling provisionNumbersGet"));
    }
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling provisionNumbersGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling provisionNumbersGet"));
    }

    // create path and map variables
    String path = "/countries/didgroups/{did_group_id}/provision";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "did_group_id", didGroupId));
    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));
    String[] contentTypes = {
      "application/json",
      "application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse20016) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20016.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * This API gets a list of provisioned numbers
   * 
   * @param didGroupId The id of the did group   * @param apiKey 
  */
  public void provisionNumbersGet (Integer didGroupId, String apiKey, final Response.Listener<InlineResponse20016> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'didGroupId' is set
    if (didGroupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'didGroupId' when calling provisionNumbersGet",
        new ApiException(400, "Missing the required parameter 'didGroupId' when calling provisionNumbersGet"));
    }
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling provisionNumbersGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling provisionNumbersGet"));
    }

    // create path and map variables
    String path = "/countries/didgroups/{did_group_id}/provision".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "did_group_id", didGroupId));

    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));

    String[] contentTypes = {
      "application/json","application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20016) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20016.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * This API gets a list of states of a given country available in the Fax.to coverage
  * 
   * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format
   * @param apiKey 
   * @return InlineResponse20013
  */
  public InlineResponse20013 statesCountryCodeGet (Integer COUNTRY_CODE, String apiKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'COUNTRY_CODE' is set
    if (COUNTRY_CODE == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'COUNTRY_CODE' when calling statesCountryCodeGet",
        new ApiException(400, "Missing the required parameter 'COUNTRY_CODE' when calling statesCountryCodeGet"));
    }
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling statesCountryCodeGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling statesCountryCodeGet"));
    }

    // create path and map variables
    String path = "/states/{COUNTRY_CODE}".replaceAll("\\{" + "COUNTRY_CODE" + "\\}", apiInvoker.escapeString(COUNTRY_CODE.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));
    String[] contentTypes = {
      "application/json",
      "application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse20013) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20013.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * This API gets a list of states of a given country available in the Fax.to coverage
   * 
   * @param COUNTRY_CODE Indicates the country code in its ISO 3166-1 alpha-3 format   * @param apiKey 
  */
  public void statesCountryCodeGet (Integer COUNTRY_CODE, String apiKey, final Response.Listener<InlineResponse20013> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'COUNTRY_CODE' is set
    if (COUNTRY_CODE == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'COUNTRY_CODE' when calling statesCountryCodeGet",
        new ApiException(400, "Missing the required parameter 'COUNTRY_CODE' when calling statesCountryCodeGet"));
    }
    // verify the required parameter 'apiKey' is set
    if (apiKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiKey' when calling statesCountryCodeGet",
        new ApiException(400, "Missing the required parameter 'apiKey' when calling statesCountryCodeGet"));
    }

    // create path and map variables
    String path = "/states/{COUNTRY_CODE}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "COUNTRY_CODE" + "\\}", apiInvoker.escapeString(COUNTRY_CODE.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("api_key", ApiInvoker.parameterToString(apiKey));

    String[] contentTypes = {
      "application/json","application/xml"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20013) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20013.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
